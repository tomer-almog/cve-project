from flask import Blueprint, request
from time import time
from os import getenv
from controllers.search_cves import SearchCVES

# cache TTL - const of 2 hours in seconds
TTL = float(getenv('TTL'))
cache = {}
search = Blueprint('search', __name__)

# This function handles "search" API to search one or more keywords and their relevant CVEs
@search.route('/task/api/v1.0/search/<string:keyword>', methods=['GET'])
@search.route('/task/api/v1.0/search', defaults={'keyword': None}, methods=['POST'])
def search_cves(keyword):
    # Handle POST HTTP request with multiple keywords in the request data
    if request.method == 'POST':
        param = request.get_json(force=True)
        try:
            res = []
            for keyword in param['keywords']:
                if keyword in cache:
                    if time() - cache[keyword]['timestamp'] < TTL:
                        res.append({'keyword': keyword, 'results': cache[keyword]['data']})
                        continue

                cache[keyword] = create_cache_entry(keyword)
                res.append({'keyword': keyword, 'results': cache[keyword]['data']})
        except AttributeError:
            return {'error': {'message': 'POST data not in expected format: {"keywords": [k1,k2...]}'}}

        return {'data': res}

    # Handle GET HTTP request with one keyword in the URL
    if keyword in cache:
        if time() - cache[keyword]['timestamp'] < TTL:
            return {'data': {'keyword': keyword, 'results': cache[keyword]['data']}}

    cache[keyword] = create_cache_entry(keyword)

    return {'data': {'keyword': keyword, 'results': cache[keyword]['data']}}


# This function generates a cache entry
def create_cache_entry(keyword):
    cache_entry = {}
    cache_entry['timestamp'] = time()
    cache_entry['data'] = SearchCVES.request(keyword)
    return cache_entry