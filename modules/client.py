from requests import get
from requests.exceptions import ConnectionError, HTTPError, Timeout, TooManyRedirects, MissingSchema


class RequestClient:

    # This function executes an HTTP request
    @classmethod
    def get(cls, url: str, headers: dict):
        response = get(url, headers=headers)
        try:
            response.raise_for_status()
        except ConnectionError:
            return cls.generate_error('There was an error in the connection to CIRCL.')
        except HTTPError:
            return cls.generate_error('There was an HTTP error for the request to CIRCL.')
        except Timeout:
            return cls.generate_error('The request to CIRCL timed out.')
        except TooManyRedirects:
            return cls.generate_error('There were too many redirects in the request to CIRCL.')
        except MissingSchema:
            return cls.generate_error('Something is wrong with the request input, please review your request.')
        except Exception:
            return cls.generate_error('An unexpected error occurred while trying to reach CIRCL. :( try again?')
        return response

    @staticmethod
    def generate_error(message):
        return {'error': {'message': message}}
